#!/hint/busybox sh
# shellcheck shell=busybox disable=SC3003


#
# functions - logging
#

log() {
	echo "${SCRIPT_NAME:?}: $1" >&2
}

# usage: log "message" [level]
if [[ -t 2 ]]; then
	log "${SCRIPT_NAME:?} started, logging to stderr" 7
elif [[ -n $JOURNAL_STREAM ]] \
  && [[ -e /proc/self/fd/2 ]] \
  && [[ "$(stat -L -c "%d:%i" /proc/self/fd/2)" == "$JOURNAL_STREAM" ]]; then
	log() {
		echo "<${2:-"6"}>$1" >&2
	}
	log "${SCRIPT_NAME:?} started, logging to journal" 7
else
	log() {
		echo "<${2:-"6"}>${SCRIPT_NAME:?}: $1" >/dev/kmsg
	}
	log "${SCRIPT_NAME:?} started, logging to kmsg" 7
fi

die() {
	log "fatal: $1" "${2-"2"}"
	exit 1
}


#
# functions - cmdline
#

if [[ ${DEBUG_CMDLINE+set} ]]; then
	cat_cmdline() {
		log "cmdline: $DEBUG_CMDLINE"
		cat <<-EOF
		$DEBUG_CMDLINE
		EOF
	}
else
	cat_cmdline() {
		log "cmdline: $(cat /proc/cmdline)"
		cat /proc/cmdline
	}
fi

parse_cmdline() {
	local vars v

	# xargs(1) is used to perform word splitting with quoting
	vars="$(cat_cmdline | xargs printf "%s\n" | "$LIB_DIR/zfs-parse-cmdline")"

	local IFS=$'\n'
	for v in $vars; do
		log "cmdline(parsed): \$$v"
		export "${v?}"
	done
}

# vim: ft=sh ts=8 noet:
