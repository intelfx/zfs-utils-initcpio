#!/hint/busybox sh
# shellcheck shell=busybox disable=SC3003,SC3001

set -eo pipefail

#
# constants
#

: ${LIB_DIR="/usr/lib/zfs/initcpio"}
STATE_DIR="/run/zfs/initcpio"
STATE_FILE="$STATE_DIR/state"

#
# functions - logging
#

log() {
	echo "${SCRIPT_NAME:?}: $1" >&2
}
setup_stderr() {
	:
}

# usage: log "message" [level]
if [[ -t 2 ]]; then
	log "${SCRIPT_NAME:?} started, logging to stderr" 7
elif [[ -n "$JOURNAL_STREAM" ]] \
  && [[ -e /proc/self/fd/2 ]] \
  && [[ "$(stat -L -c "%d:%i" /proc/self/fd/2)" == "$JOURNAL_STREAM" ]]; then
	log() {
		echo "<${2:-"6"}>$1" >&2
	}
	setup_stderr() {
		exec 2> >(sed '/^<[0-9]>/b; s/^/<7>DEBUG: /' >&2)
	}
	log "${SCRIPT_NAME:?} started, logging to journal" 7
else
	log() {
		echo "<${2:-"6"}>${SCRIPT_NAME:?}: $1" >/dev/kmsg
	}
	setup_stderr() {
		# exec 2> >(sed "/^<[0-9]>/b; s/^/<7>${SCRIPT_NAME}: DEBUG: /" | while IFS='' read -r line; do printf "%s\n" "$line"; done >/dev/kmsg)
		exec 2> >(stdbuf -oL -eL sed "/^<[0-9]>/b; s/^/<7>${SCRIPT_NAME}: DEBUG: /" &>/dev/kmsg)
	}
	log "${SCRIPT_NAME:?} started, logging to kmsg" 7
fi

die() {
	log "fatal: $1" "${2-"2"}"
	exit 1
}

setup_debug() {
	if [[ ${ZFS_ROOT_DEBUG+set} ]] || grep -q -Ew 'zfsroot.debug' /proc/cmdline; then
		setup_stderr
		set -x
	fi
}


#
# functions - cmdline
#

if [[ ${DEBUG_CMDLINE+set} ]]; then
	cat_cmdline() {
		log "cmdline: $DEBUG_CMDLINE"
		cat <<-EOF
		$DEBUG_CMDLINE
		EOF
	}
else
	cat_cmdline() {
		log "cmdline: $(cat /proc/cmdline)"
		cat /proc/cmdline
	}
fi

parse_cmdline() {
	local vars v

	# xargs(1) is used to perform word splitting with quoting
	vars="$(cat_cmdline | xargs printf "%s\n" | "$LIB_DIR/zfs-parse-cmdline")"

	local IFS=$'\n'
	for v in $vars; do
		log "cmdline(parsed): \$$v"
		export "${v?}"
	done
}

vars_present() {
	[[ -e "$STATE_FILE" ]]
}

dump_vars() {
	local vars k v

	# XXX: multi-line variables wtll break this
	vars="$(set | grep -Eo '^ZFS_ROOT_[^=]*')"

	install -dm700 "${STATE_FILE%/*}"
	local IFS=$'\n'
	for k in $vars; do
		if eval "[[ \${$k+set} ]]"; then
			v="$(eval "printf '%s' \"\$$k\"")"
			log "writing: \$$k=$v"
			printf "%s=%s\n" "$k" "$v"
		fi
	done | install -Dm600 /dev/stdin "$STATE_FILE"
}

load_vars() {
	while IFS='' read -r line; do
		log "env(read): \$$line"
		export "${line?}"
	done <"$STATE_FILE"
}

# vim: ft=bash ts=8 noet:
