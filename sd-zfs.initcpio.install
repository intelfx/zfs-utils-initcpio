#!/bin/bash

build() {
	local applet

	# add parts of base hook:
	# - busybox with applet symlinks
	# - kmod with applet symlinks
	# - blkid
	add_binary /usr/lib/initcpio/busybox /bin/busybox
	for applet in $(/usr/lib/initcpio/busybox --list); do
		add_symlink "/bin/$applet" busybox
	done
	add_binary kmod
	for applet in {dep,ins,rm,ls}mod mod{probe,info}; do
		add_symlink "/usr/bin/$applet" kmod
	done
	add_binary blkid

	# Kernel modules
	map add_module \
		zfs \
		spl \

	# udev rules
	map add_file \
		/usr/lib/udev/rules.d/60-zvol.rules \
		/usr/lib/udev/rules.d/69-vdev.rules \
		/usr/lib/udev/rules.d/90-zfs.rules \

	# systemd units
	map add_systemd_unit \
		systemd-udev-settle.service

	# ZFS binaries
	map add_binary \
		zpool \
		zfs \
		mount.zfs \
		/usr/lib/udev/vdev_id \
		/usr/lib/udev/zvol_id

	# Generator and support scripts
	add_binary /usr/lib/zfs/initcpio/zfs-root-generator /usr/lib/systemd/system-generators/
	add_binary /usr/lib/zfs/initcpio/zfs-parse-cmdline
	add_binary /usr/lib/zfs/initcpio/zfs-prepare-rootfs

	# ZFS-relevant configuration files
	local copied_files=(
		# /etc/zfs/zpool.cache
		# /etc/modprobe.d/{spl,zfs}.conf
		/etc/hostid
	)
	for f in "${copied_files[@]}"; do
		if [[ -e "$f" ]]; then
			add_file "$f"
		fi
	done

	# Synthesize hostid if necessary
	if [[ ! -e /etc/hostid ]]; then
		zgenhostid -o "${BUILDROOT}/etc/hostid" "$(hostid)"
	fi
}

help() {
	cat << EOF
This hook adds ZFS support for systemd-based initrd.
It has a hard dependency on the systemd hook. Since it's implemented
using shell scripts, it still requires busybox and will copy it to
the initrd if you don't have the base hook.

To use this hook, simply add it to your HOOKS array in mkinitcpio.conf.
You'll also need to change the kernel command line. The supported cmdline
formats are:
  1. root=zfs, which imports all pools in initrd, searches for the
     first pool with the bootfs property set, and then mounts bootfs as root.
  2. root=zfs:poolname, which imports only the specified pool and then mounts
     the pool's bootfs as root.
  3. root=zfs:poolname/dataset, which imports only the specified pool and then
     mounts the specified dataset as root.
EOF
}

# vim: ft=bash ts=8 noet:
