#!/usr/bin/busybox sh
# shellcheck shell=busybox disable=SC3003

# cmdline format:
#
# use a particular dataset:
#    root=zfs:pool/dataset
# use the bootfs property of a pool:
#    root=zfs:pool
# import all pools and use the first one with a bootfs property:
#    root=zfs

set -eo pipefail


#
# constants
#

LIB_DIR="/usr/lib/zfs/initcpio"


#
# functions
#

# usage: log "message" [level]
if [[ -t 2 ]]; then
	log() {
		echo "zfs-root-generator: $1" >&2
	}
elif [[ -n $JOURNAL_STREAM ]] \
  && [[ -e /proc/self/fd/2 ]] \
  && [[ "$(stat -L -c "%d:%i" /proc/self/fd/2)" == "$JOURNAL_STREAM" ]]; then
	log() {
		echo "<${2:-"6"}>zfs-root-generator: $1" >&2
	}
else
	log() {
		echo "<${2:-"6"}>zfs-root-generator: $1" >/dev/kmsg
	}
fi

die() {
	log "fatal: $1" "${2-"2"}"
	exit 1
}

if [[ ${DEBUG_CMDLINE+set} ]]; then
	cat_cmdline() {
		log "cmdline: $DEBUG_CMDLINE"
		cat <<-EOF
		$DEBUG_CMDLINE
		EOF
	}
else
	cat_cmdline() {
		log "cmdline: $(cat /proc/cmdline)"
		cat /proc/cmdline
	}
fi

parse_cmdline() {
	local vars v

	# xargs(1) is used to perform word splitting with quoting
	vars="$(cat_cmdline | xargs printf "%s\n" | "$LIB_DIR/zfs-parse-cmdline")"

	local IFS=$'\n'
	for v in $vars; do
		log "cmdline(parsed): \$$v"
		export "${v?}"
	done
}

enable_unit() {
	local unit="$1" target="$2"
	log "adding $unit to $target"
	install -dm755 "$GENERATOR_DIR/$target.wants"
	ln -rsf "$GENERATOR_DIR/$unit" -t "$GENERATOR_DIR/$target.wants"
}

write_unit() {
	local unit="$1"
	log "writing $unit"
	{
		cat <<-"EOF"
		# Automatically generated by zfs-root-generator

		EOF
		cat
	} | install -Dm644 /dev/stdin "$GENERATOR_DIR/$unit"
}

write_common_units() {
	# install -Dm644 /dev/stdin "$GENERATOR_DIR/sysroot.mount.d/zfs-override.conf"
	write_unit sysroot.mount <<-EOF
	[Mount]
	PassEnvironment=ZFS_ROOT_DATASET
	Type=zfs
	What=\${ZFS_ROOT_DATASET}
	Options=zfsutil
	EOF

	write_unit zfs-initrd-prepare.service <<-EOF
	[Unit]
	Description=Prepare to mount ZFS rootfs
	DefaultDependencies=no
	Wants=zfs-initrd-import.target
	After=zfs-initrd-import.target
	Before=initrd-root-device.target

	[Service]
	Type=oneshot
	RemainAfterExit=yes
	EnvironmentFile=-/etc/default/zfs
	ExecStart=${LIB_DIR}/zfs-prepare-rootfs
	PassEnvironment=ZFS_ROOT_MODE
	PassEnvironment=ZFS_ROOT_POOL
	PassEnvironment=ZFS_ROOT_DATASET
	EOF

	enable_unit zfs-initrd-prepare.service initrd-root-device.target
}

write_import_unit() {
	local import_cmds

	case "${ZFS_ROOT_MODE:?}" in
		all) import_cmds="\
ExecStart=/usr/bin/zpool import -aN -o cachefile=none
" ;;

		pool|dataset) import_cmds="\
ExecStart=/usr/bin/zpool import -N -o cachefile=none \${ZFS_ROOT_POOL}
PassEnvironment=ZFS_ROOT_POOL
" ;;

		*) die "invalid \$ZFS_ROOT_MODE=\"$ZFS_ROOT_MODE\"" ;;
	esac

	write_unit zfs-initrd-import-scan.service <<-EOF
	[Unit]
	Description=Import ZFS pool(s) for rootfs by device scanning
	Documentation=man:zpool(8)
	DefaultDependencies=no
	Requires=systemd-udev-settle.service
	After=systemd-udev-settle.service
	After=cryptsetup.target
	After=multipathd.service
	Before=zfs-initrd-import.target
	ConditionPathIsDirectory=/sys/module/zfs

	[Service]
	Type=oneshot
	RemainAfterExit=yes
	EnvironmentFile=-/etc/default/zfs
	${import_cmds}
	EOF

	write_unit zfs-initrd-import.target <<-EOF
	[Unit]
	Description=ZFS pool import target for rootfs
	Before=initrd-root-device.target
	EOF

	enable_unit zfs-initrd-import-scan.service zfs-initrd-import.target
	enable_unit zfs-initrd-import.target initrd-root-device.target
}


#
# main
#

GENERATOR_DIR="$1"
if ! [[ "$GENERATOR_DIR" && -d "$GENERATOR_DIR" ]]; then
	die "invalid generator directory \"$GENERATOR_DIR\""
fi

parse_cmdline

case "${ZFS_ROOT_MODE:?}" in
all|pool|dataset) ;;
none) log "nothing to do"; exit 0 ;;
*) die "invalid \$ZFS_ROOT_MODE=\"$ZFS_ROOT_MODE\"" ;;
esac

write_common_units
write_import_unit

log "done"
exit 0

# vim: ft=sh ts=8 noet:
